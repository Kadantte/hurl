error: Assert failure
  --> tests_failed/predicate.hurl:4:0
   |
   | GET http://localhost:8000/predicate/error/type
   | ...
 4 | jsonpath "$.status" == "true"
   |   actual:   boolean <true>
   |   expected: string <true>
   |

error: Assert failure
  --> tests_failed/predicate.hurl:5:0
   |
   | GET http://localhost:8000/predicate/error/type
   | ...
 5 | jsonpath "$.count" == 0
   |   actual:   integer <1>
   |   expected: integer <0>
   |

error: Assert failure
  --> tests_failed/predicate.hurl:6:0
   |
   | GET http://localhost:8000/predicate/error/type
   | ...
 6 | jsonpath "$.message" == 0
   |   actual:   string <0>
   |   expected: integer <0>
   |

error: Assert failure
  --> tests_failed/predicate.hurl:7:0
   |
   | GET http://localhost:8000/predicate/error/type
   | ...
 7 | jsonpath "$.empty" == 0
   |   actual:   string <>
   |   expected: integer <0>
   |

error: Assert failure
  --> tests_failed/predicate.hurl:8:0
   |
   | GET http://localhost:8000/predicate/error/type
   | ...
 8 | jsonpath "$.number" == 1.1
   |   actual:   float <1.0>
   |   expected: float <1.1>
   |

error: Assert failure
  --> tests_failed/predicate.hurl:9:0
   |
   | GET http://localhost:8000/predicate/error/type
   | ...
 9 | jsonpath "$.count" startsWith "0"
   |   actual:   integer <1>
   |   expected: starts with string <0>
   |   >>> types between actual and expected are not consistent
   |

error: Assert failure
  --> tests_failed/predicate.hurl:10:0
   |
   | GET http://localhost:8000/predicate/error/type
   | ...
10 | jsonpath "$.count" endsWith "0"
   |   actual:   integer <1>
   |   expected: ends with string <0>
   |   >>> types between actual and expected are not consistent
   |

error: Assert failure
  --> tests_failed/predicate.hurl:11:0
   |
   | GET http://localhost:8000/predicate/error/type
   | ...
11 | jsonpath "$.count" matches "hi"
   |   actual:   integer <1>
   |   expected: matches regex <hi>
   |   >>> types between actual and expected are not consistent
   |

error: Assert failure
  --> tests_failed/predicate.hurl:12:0
   |
   | GET http://localhost:8000/predicate/error/type
   | ...
12 | jsonpath "$.count" isEmpty
   |   actual:   integer <1>
   |   expected: count equals to 0
   |   >>> types between actual and expected are not consistent
   |

error: Assert failure
  --> tests_failed/predicate.hurl:13:0
   |
   | GET http://localhost:8000/predicate/error/type
   | ...
13 | jsonpath "$.count" contains "foo"
   |   actual:   integer <1>
   |   expected: contains string <foo>
   |   >>> types between actual and expected are not consistent
   |

error: Assert failure
  --> tests_failed/predicate.hurl:14:0
   |
   | GET http://localhost:8000/predicate/error/type
   | ...
14 | jsonpath "$.count" isIsoDate
   |   actual:   integer <1>
   |   expected: string
   |   >>> types between actual and expected are not consistent
   |

error: Assert failure
  --> tests_failed/predicate.hurl:15:0
   |
   | GET http://localhost:8000/predicate/error/type
   | ...
15 | jsonpath "$.message" startsWith "hi"
   |   actual:   string <0>
   |   expected: starts with string <hi>
   |

error: Assert failure
  --> tests_failed/predicate.hurl:16:0
   |
   | GET http://localhost:8000/predicate/error/type
   | ...
16 | jsonpath "$.message" endsWith "hi"
   |   actual:   string <0>
   |   expected: ends with string <hi>
   |

error: Assert failure
  --> tests_failed/predicate.hurl:17:0
   |
   | GET http://localhost:8000/predicate/error/type
   | ...
17 | jsonpath "$.message" contains "hi"
   |   actual:   string <0>
   |   expected: contains string <hi>
   |

error: Assert failure
  --> tests_failed/predicate.hurl:18:0
   |
   | GET http://localhost:8000/predicate/error/type
   | ...
18 | jsonpath "$.message" matches "hi"
   |   actual:   string <0>
   |   expected: matches regex <hi>
   |

error: Invalid regex
  --> tests_failed/predicate.hurl:19:22
   |
   | GET http://localhost:8000/predicate/error/type
   | ...
19 | jsonpath "$.message" matches "hi{"
   |                      ^^^^^^^^^^^^^ regex expression is not valid
   |

error: Assert failure
  --> tests_failed/predicate.hurl:20:0
   |
   | GET http://localhost:8000/predicate/error/type
   | ...
20 | jsonpath "$.message" isEmpty
   |   actual:   count equals to 1
   |   expected: count equals to 0
   |

error: Filter error
  --> tests_failed/predicate.hurl:21:22
   |
   | GET http://localhost:8000/predicate/error/type
   | ...
21 | jsonpath "$.message" count == 1
   |                      ^^^^^ invalid filter input: string
   |

error: Assert failure
  --> tests_failed/predicate.hurl:22:0
   |
   | GET http://localhost:8000/predicate/error/type
   | ...
22 | jsonpath "$.message" isIsoDate
   |   actual:   0
   |   expected: string with format YYYY-MM-DDTHH:mm:ss.sssZ
   |

error: Assert failure
  --> tests_failed/predicate.hurl:23:0
   |
   | GET http://localhost:8000/predicate/error/type
   | ...
23 | jsonpath "$.toto" exists
   |   actual:   none
   |   expected: something
   |

error: Assert failure
  --> tests_failed/predicate.hurl:24:0
   |
   | GET http://localhost:8000/predicate/error/type
   | ...
24 | jsonpath "$.message" not exists
   |   actual:   string <0>
   |   expected: not something
   |

error: Assert failure
  --> tests_failed/predicate.hurl:25:0
   |
   | GET http://localhost:8000/predicate/error/type
   | ...
25 | jsonpath "$.list" count == 2
   |   actual:   integer <3>
   |   expected: integer <2>
   |

error: Assert failure
  --> tests_failed/predicate.hurl:26:0
   |
   | GET http://localhost:8000/predicate/error/type
   | ...
26 | jsonpath "$.not-exist" == 2
   |   actual:   none
   |   expected: integer <2>
   |

error: Assert failure
  --> tests_failed/predicate.hurl:27:0
   |
   | GET http://localhost:8000/predicate/error/type
   | ...
27 | jsonpath "$.not-exist" > 3
   |   actual:   none
   |   expected: greater than <integer <3>>
   |

error: Assert failure
  --> tests_failed/predicate.hurl:28:0
   |
   | GET http://localhost:8000/predicate/error/type
   | ...
28 | jsonpath "$.not-exist" >= 3
   |   actual:   none
   |   expected: greater than or equals to <integer <3>>
   |

error: Assert failure
  --> tests_failed/predicate.hurl:29:0
   |
   | GET http://localhost:8000/predicate/error/type
   | ...
29 | jsonpath "$.not-exist" < 1
   |   actual:   none
   |   expected: less than <integer <1>>
   |

error: Assert failure
  --> tests_failed/predicate.hurl:30:0
   |
   | GET http://localhost:8000/predicate/error/type
   | ...
30 | jsonpath "$.not-exist" <= 1
   |   actual:   none
   |   expected: less than or equals to <integer <1>>
   |

error: Filter error
  --> tests_failed/predicate.hurl:31:24
   |
   | GET http://localhost:8000/predicate/error/type
   | ...
31 | jsonpath "$.not-exist" count == 1
   |                        ^^^^^ missing value to apply filter
   |

error: Assert failure
  --> tests_failed/predicate.hurl:32:0
   |
   | GET http://localhost:8000/predicate/error/type
   | ...
32 | jsonpath "$.not-exist" startsWith "foo"
   |   actual:   none
   |   expected: starts with string <foo>
   |

error: Assert failure
  --> tests_failed/predicate.hurl:33:0
   |
   | GET http://localhost:8000/predicate/error/type
   | ...
33 | jsonpath "$.not-exist" endsWith "foo"
   |   actual:   none
   |   expected: ends with string <foo>
   |

error: Assert failure
  --> tests_failed/predicate.hurl:34:0
   |
   | GET http://localhost:8000/predicate/error/type
   | ...
34 | jsonpath "$.not-exist" contains "foo"
   |   actual:   none
   |   expected: contains string <foo>
   |

error: Assert failure
  --> tests_failed/predicate.hurl:35:0
   |
   | GET http://localhost:8000/predicate/error/type
   | ...
35 | jsonpath "$.not-exist" matches /foo/
   |   actual:   none
   |   expected: matches regex <foo>
   |

error: Assert failure
  --> tests_failed/predicate.hurl:36:0
   |
   | GET http://localhost:8000/predicate/error/type
   | ...
36 | jsonpath "$.not-exist" isInteger
   |   actual:   none
   |   expected: integer
   |

error: Assert failure
  --> tests_failed/predicate.hurl:37:0
   |
   | GET http://localhost:8000/predicate/error/type
   | ...
37 | jsonpath "$.not-exist" isFloat
   |   actual:   none
   |   expected: float
   |

error: Assert failure
  --> tests_failed/predicate.hurl:38:0
   |
   | GET http://localhost:8000/predicate/error/type
   | ...
38 | jsonpath "$.not-exist" isBoolean
   |   actual:   none
   |   expected: boolean
   |

error: Assert failure
  --> tests_failed/predicate.hurl:39:0
   |
   | GET http://localhost:8000/predicate/error/type
   | ...
39 | jsonpath "$.not-exist" isString
   |   actual:   none
   |   expected: string
   |

error: Assert failure
  --> tests_failed/predicate.hurl:40:0
   |
   | GET http://localhost:8000/predicate/error/type
   | ...
40 | jsonpath "$.not-exist" isCollection
   |   actual:   none
   |   expected: collection
   |

error: Assert failure
  --> tests_failed/predicate.hurl:41:0
   |
   | GET http://localhost:8000/predicate/error/type
   | ...
41 | jsonpath "$.not-exist" isDate
   |   actual:   none
   |   expected: date
   |

error: Assert failure
  --> tests_failed/predicate.hurl:42:0
   |
   | GET http://localhost:8000/predicate/error/type
   | ...
42 | jsonpath "$.not-exist" exists
   |   actual:   none
   |   expected: something
   |

error: Assert failure
  --> tests_failed/predicate.hurl:43:0
   |
   | GET http://localhost:8000/predicate/error/type
   | ...
43 | jsonpath "$.not-exist" isEmpty
   |   actual:   none
   |   expected: empty
   |

error: Assert failure
  --> tests_failed/predicate.hurl:44:0
   |
   | GET http://localhost:8000/predicate/error/type
   | ...
44 | jsonpath "$.not_a_date" isIsoDate
   |   actual:   2018
   |   expected: string with format YYYY-MM-DDTHH:mm:ss.sssZ
   |

error: Assert failure
  --> tests_failed/predicate.hurl:45:0
   |
   | GET http://localhost:8000/predicate/error/type
   | ...
45 | jsonpath "$.is_a_date" not isIsoDate
   |   actual:   2018-12-10T13:45:00.000Z
   |   expected: not string with format YYYY-MM-DDTHH:mm:ss.sssZ
   |

error: Assert failure
  --> tests_failed/predicate.hurl:46:0
   |
   | GET http://localhost:8000/predicate/error/type
   | ...
46 | jsonpath "$.not_a_date" isNumber
   |   actual:   string <2018>
   |   expected: number
   |

